<link rel="import" href="./global.pc" />
<link rel="import" href="./gutter.pc" />
<link rel="import" href="./artboards-pane.pc" />
<link rel="import" href="./components-pane.pc" />
<link rel="import" href="./css-inspector-pane.pc" />

<component id="td-zoom">
  <style>
    :host {
      display: none;
    }
    a {
      background: red;
      text-decoration: none;
      border-radius: 50%;
    }
  </style>
  <template>
    <div class="workspace-footer">
      50%      
      <a href="#">
        -
      </a>     
      <a href="#">
        +
      </a>
    </div>
  </template>
</component>

<component id="td-crumb">
  <style>
    :host {
      display: inline;
      padding-right: var(--base4);
    }
  </style>
  <template>
    [[bind label]]
  </template>
</component>

<component id="td-breadcrumbs">
  <style>
    .breadcrumbs {
      background: var(--background);
      padding: var(--base8) var(--base11);
    }
  </style>
  <template>
    <div class="breadcrumbs">
      <td-crumb class="crumb" [[repeat items as item]] [[bind item]]></td-crumb>
    </div>
  </template>
  <preview name="main" width="100" height="100">
    <td-breadcrumbs items=[[bind [
      {label: "html"},
      {label: "body"},
      {label: ".container"},
      {label: "items"},
      {label: "item"}
    ]]] />
  </preview>
</component>

<component id="td-workspace-footer">
  <style>
    .workspace-footer {
      border-top: 2px solid var(--border-color-deep);
      background: var(--background);
      padding: var(--base8) var(--base11);
    }
  </style>
  <template>
    <div class="workspace-footer">
      <td-zoom value=[[bind 0.5]] />    
    </div>
  </template>
</component>

<component id="td-window">
  <style>
    :host {
      background: red;
    }

    .outer {
      position: absolute;
      background: white;
    }

    iframe {
      border: none;
      width: 100%;
      height: 100%;
    }
    
  </style>
  <template>
    <div class="outer" style=[[bind {left: left, top: top, width: width, height: height }]]>
    </div>
  </template>
</component>

<component id="td-stage">
  <style>
    :host {
      position: relative;
    }
  </style>
  <template>
  </template>
</component>

<component id="td-workspace">
  <style>
    .workspace {
      display: flex;
    }

    .center {
      display: flex;
      width: 100%;
      height: 100%;
      flex-direction: column;
    }
    
    td-stage {
      background: var(--background-deep);
      flex: 1;
      width: 100%;
      height: 100%;
    }
  </style>
  <template>
    <div class="workspace">
      <td-gutter left>
        <td-artboards-pane onArtboardClicked artboards=[[bind [
          {
            $id: null,
            label: "component 2",
            loading: true
          },
          {
            $id: null,
            location: "http://google.com",
            hovering: true,
            label: "component 2"
          },
          {
            $id: null,
            label: "component 3",
            loading: true
          },
          {
            $id: null,
            label: "component 4",
            loading: true
          },
          {
            $id: null,
            selected: true,
            label: "component 2"
          }
        ]]] />
        <td-components-pane onAddComponentClick nativeComponentsTabSelected dispatch components=[[bind [
          { 
            $id: null,
            onDragStart: null,
            onDragEnd: null,
            onClick: null,
            label: "div", 
            screenshot: {
              uri: "https://img00.deviantart.net/8ef2/i/2012/325/e/c/8_bit_sprites__nyan_cat_by_toshirofrog-d4hzdrp.png",
              clip: { left: 0, top: 0, right: 900, bottom: 400 }
            },
            screenshotScale: 0.04
          },
          { 
            $id: null,
            onDragStart: null,
            onDragEnd: null,
            onClick: null,
            label: "h2", 
            screenshot: {
              uri: "https://img00.deviantart.net/8ef2/i/2012/325/e/c/8_bit_sprites__nyan_cat_by_toshirofrog-d4hzdrp.png",
              clip: { left: 0, top: 0, right: 900, bottom: 400 }
            },
            screenshotScale: 0.04
          },
          { 
            $id: null,
            onDragStart: null,
            onDragEnd: null,
            onClick: null,
            label: "h3", 
            hovering: true,
            screenshot: {
              uri: "https://img00.deviantart.net/8ef2/i/2012/325/e/c/8_bit_sprites__nyan_cat_by_toshirofrog-d4hzdrp.png",
              clip: { left: 0, top: 0, right: 900, bottom: 400 }
            },
            screenshotScale: 0.04
          },
          { label: "h4", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "span", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "form", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "input", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "ul", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "li", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "li", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "li", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "li", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "li", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "li", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "li", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "li", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "li", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "li", $id: null, onDragStart: null, onDragEnd: null, onClick: null },
          { label: "li", $id: null, onDragStart: null, onDragEnd: null, onClick: null }
        ]]] />
      </td-gutter>
      <div class="center">
        <div [[if showError]]>
          <td-banner onClose error>Some error</td-banner>
        </div>
        <td-stage />
        <td-workspace-footer workspace=[[bind workspace]] />
      </div>
      <td-gutter right>
          <td-css-inspector-pane moreButtonProps=[[bind {
            onButtonClick: null,
            options: []
          }]] onMoreClick styleRules=[[bind [
      {
        label: ".container",
        source: { uri: "styles.css" },
        element: {
          tagName: "div"
        },
        rule: {
          assocId: 1
        },
        onSelectorTextFocus: null,
        onAddDeclarationClick: null,
        declarations: [
          { 
            name: "color",
            sourceValue: "red",
            value: {
              type: "COLOR",
              value: "red"
            },
            onNameFocus: null,
            onValueFocus: null,
            hovering: true,
            onToggleDeclarationClick: null
          },
          { 
            name: "flex",
            sourceValue: "1",
            value: {
              type: "NUMBER",
              value: 1
            },
            disabled: true,
            onNameFocus: null,
            onValueFocus: null,
            onToggleDeclarationClick: null
          },
          { 
            name: "flex-direction",
            sourceValue: "row",
            value: {
              type: "KEYWORD",
              name: "row"
            },
            onNameFocus: null,
            onValueFocus: null,
            onToggleDeclarationClick: null
          },
          { 
            name: "background",
            sourceValue: "background(255, 255, 255 0)",
            value: {
              type: "CALL",
              name: "rgb",
              returnType: "COLOR",
              returnValue: "rgb(255, 255, 0)",
              params: [
                {
                  type: "NUMBER",
                  value: 255,
                },
                {
                  type: "NUMBER",
                  value: 255,
                },
                {
                  type: "NUMBER",
                  value: 0
                }
              ]
            },
            onNameFocus: null,
            onValueFocus: null,
            onToggleDeclarationClick: null
          },
          { 
            name: "margin-top",
            sourceValue: "11px",
            value: {
              type: "MEASUREMENT",
              value: "10",
              unit: "px"
            },
            onNameFocus: null,
            onValueFocus: null,
            onToggleDeclarationClick: null
          }
        ]
      },
      {
        label: ".header",
        headerHovering: true,
        rule: {
          assocId: 1
        },
        onSelectorTextFocus: null,
        onAddDeclarationClick: null,
        declarations: [
          { 
            name: "background",
            sourceValue: null,
            value: {
              type: "COMMA_LIST",
              items: [
                {
                  type: "SPACED_LIST",
                  items: [
                    {
                      type: "CALL",
                      name: "rgb",
                      returnType: "COLOR",
                      returnValue: "rgb(255, 0, 255)",
                      params: [
                        {
                          type: "NUMBER",
                          value: 255
                        },
                        {
                          type: "NUMBER",
                          value: 0
                        },
                        {
                          type: "NUMBER",
                          value: 255
                        }
                      ]
                    },
                    {
                      type: "KEYWORD",
                      name: "no-repeat"
                    }
                  ]
                },
                {
                  type: "SPACED_LIST",
                  items: [
                    {
                      type: "CALL",
                      name: "rgb",
                      returnType: "COLOR",
                      returnValue: "rgb(255, 100, 0)",
                      params: [
                        {
                          type: "NUMBER",
                          value: 255
                        },
                        {
                          type: "NUMBER",
                          value: 100
                        },
                        {
                          type: "NUMBER",
                          value: 0
                        }
                      ]
                    },
                    {
                      type: "KEYWORD",
                      name: "no-repeat"
                    }
                  ]
                }
              ]
            },
            onNameFocus: null,
            onValueFocus: null,
            onToggleDeclarationClick: null
          },
          {
            name: "padding",
            sourceValue: null,
            value: {
              type: "CALL",
              name: "var",
              returnType: null,
              returnValue: null,
              params: [
                {
                  type: "KEYWORD",
                  name: "--padding"
                }
              ]
            },
            onNameFocus: null,
            onValueFocus: null,
            onToggleDeclarationClick: null
          },
          {
            name: "color",
            sourceValue: null,
            overridden: true,
            value: {
              type: "CALL",
              name: "var",
              open: true,
              source: "var(---font-color)",
              returnType: "COLOR",
              returnValue: "#CCCCCC",
              params: [
                {
                  type: "KEYWORD",
                  name: "--font-color"
                }
              ]
            },
            onNameFocus: null,
            onValueFocus: null,
            onToggleDeclarationClick: null
          }
        ]
      },
      {
        label: "body, html",
        inherited: true,
        rule: {
          assocId: 1
        },
        onSelectorTextFocus: null,
        onAddDeclarationClick: null,
        declarations: [
          { 
            name: "padding",
            ignored: true,
            sourceValue: null,
            value: {
              type: "SPACED_LIST",
              items: [
                {
                  type: "MEASUREMENT",
                  value: 10,
                  unit: "px"
                },
                {
                  type: "MEASUREMENT",
                  value: 20,
                  unit: "px"
                }
              ]
            },
            onNameFocus: null,
            onValueFocus: null,
            onToggleDeclarationClick: null
          }
        ]
      }
    ]]] />
      </td-gutter>
    </div>
  </template>
  <preview name="main" width="1024" height="768">
    <td-workspace workspace=[[bind null]] />
  </preview>
  <preview name="error-banner" width="1024" height="768">
    <td-workspace workspace=[[bind null]] showError />
  </preview>
</component>

